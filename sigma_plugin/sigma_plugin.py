# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Sigma
                                 A QGIS plugin
 Sigma plugin for Qgis.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-02-14
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Dmitriev Pavel
        email                : dmitriev.pv@dclouds.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from pathlib import Path

from qgis.PyQt.QtGui import QIcon
import qgis.PyQt.QtWidgets as QtWidgets

# Initialize Qt resources from file resources.py
# from resources import *

# Import the code for the dialog
from .help_tools.help_func import translate
from .help_tools.config_reader import ConfigWorker
from .plugin_modules.import_data import ImportDataTool
from .plugin_modules.kv_net import KvNetTool
from .plugin_modules.topology_checker import TopologyCheckerTool
from .plugin_modules.square_counter import SquareCounterTool
from .plugin_modules.dynamic_style_changer import DynamicStyleChangerTool
from .plugin_modules.line_in_polygon import LineInPolygonTool
from .plugin_modules.allotment_redactor import AllotmentRedactorTool
from .test_external_program import ExternalProgram

# TODO Перед релизом переделать на абсолюные импорты,
# TODO Не даёт перезапускать модули с помощью плагинрелоудера при абсолютных импортах.


class Sigma:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """

        # Save reference to the QGIS interface
        self.iface = iface

        # Declare instance attributes
        self.actions = []
        self.menu = translate("Sigma")
        self.toolbar = self.iface.addToolBar("Sigma: Основные инструменты")
        self.toolbar.setObjectName("Sigma: Основные инструменты")
        self.dialogs = {}

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None
    ) -> QtWidgets.QAction:
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QtWidgets.QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):  # pylint: disable=invalid-name
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        # TODO Replace in config
        icon_path = str(Path(__file__).parents[0].joinpath("help_tools/icons/icon.png"))

        config = ConfigWorker(header="plugin_configs").config_reader["icons_path"]
        file_path = Path(__file__).parents[0]

        import_icon = str(file_path.joinpath(config["import_data"]))
        kv_net_icon = str(file_path.joinpath(config["kv_net"]))
        topology_check_icon = str(file_path.joinpath(config["topology_checker"]))
        square_counter_icon = str(file_path.joinpath(config["square_counter"]))
        # line_in_polygon_icon = str(file_path.joinpath(config["line_in_polygon"]))

        self.add_action(
            import_icon,
            add_to_menu=False,
            add_to_toolbar=True,
            text=translate("Импорт данных"),
            callback=self.data_import_handler
        )
        self.add_action(
            kv_net_icon,
            add_to_menu=False,
            add_to_toolbar=True,
            text=translate("Создать квартальную сеть"),
            callback=self.kv_net_handler
        )
        self.add_action(
            topology_check_icon,
            add_to_menu=False,
            add_to_toolbar=True,
            text=translate("Проверка топологии"),
            callback=self.topology_checker_handler,
        )
        self.add_action(
            square_counter_icon,
            add_to_menu=False,
            add_to_toolbar=True,
            text=translate("Подсчёт площади"),
            callback=self.square_counter_handler
        )
        self.add_action(
            icon_path,
            add_to_menu=False,
            add_to_toolbar=True,
            text=translate("Динамическое изменение стилей"),
            callback=self.dynamic_style_changer_handler
        )
        self.add_action(
            icon_path,
            add_to_menu=False,
            add_to_toolbar=True,
            text=translate("Линейные объекты в полигональные"),
            callback=self.line_in_polygon_handler
        )
        # self.add_action(
        #     icon_path,
        #     add_to_menu=False,
        #     add_to_toolbar=True,
        #     text=translate("Редактирование выделов"),
        #     callback=self.allotment_redactor_handler
        # )
        # self.add_action(
        #     icon_path,
        #     add_to_menu=False,
        #     add_to_toolbar=True,
        #     text=translate("Тестовая внешняя программа"),
        #     callback=self.test_external_program
        # )
        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(translate("Sigma"), action)
            self.iface.removeToolBarIcon(action)

        self.toolbar.deleteLater()

    def data_import_handler(self):
        import_data_tool = ImportDataTool(
            iface=self.iface, parent_window=self.iface.mainWindow()
        )
        self.first_start = False

        return import_data_tool.import_data_run()

    def kv_net_handler(self):
        kv_net_tool = KvNetTool(
            iface=self.iface, parent_window=self.iface.mainWindow()
        )
        self.first_start = False
        return kv_net_tool.kv_net_run()

    def topology_checker_handler(self):
        if self.dialogs.get("topology_checker_dlg", False):
            if self.dialogs["topology_checker_dlg"].topology_checker_dlg.isVisible():
                return None
        topology_checker_tool = TopologyCheckerTool(iface=self.iface)
        self.dialogs["topology_checker_dlg"] = topology_checker_tool
        return topology_checker_tool.topology_checker_run()

    def square_counter_handler(self):
        square_counter_tool = SquareCounterTool(
            iface=self.iface, parent_window=self.iface.mainWindow()
        )
        self.first_start = False
        return square_counter_tool.square_counter_run()

    def dynamic_style_changer_handler(self):
        dynamic_style_changer_tool = DynamicStyleChangerTool(
            iface=self.iface, parent_window=self.iface.mainWindow()
        )
        self.first_start = False
        return dynamic_style_changer_tool.dynamic_style_changer_run()

    def line_in_polygon_handler(self):
        line_in_polygon_tool = LineInPolygonTool(
            iface=self.iface, parent_window=self.iface.mainWindow()
        )
        self.first_start = False
        return line_in_polygon_tool.line_in_polygon_run()

    def allotment_redactor_handler(self):
        if self.dialogs.get("allotment_redactor_dlg", False):
            if self.dialogs["allotment_redactor_dlg"].allotment_redactor_dlg.isVisible():
                return None
        allotment_redactor_tool = AllotmentRedactorTool(iface=self.iface)
        self.dialogs["allotment_redactor_dlg"] = allotment_redactor_tool
        return allotment_redactor_tool.allotment_redactor_data_run()

    def test_external_program(self):
        if self.dialogs.get("external_dlg", False):
            if self.dialogs["external_dlg"].external_program_dlg.isVisible():
                return None
        external_program = ExternalProgram(iface=self.iface)
        self.dialogs["external_dlg"] = external_program
        return external_program.external_program_run()
